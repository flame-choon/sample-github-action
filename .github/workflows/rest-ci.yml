name: REST CI

on:
  workflow_call:
    inputs:
      stage:
        required: true
        type: string
      aws-region:
        required: true
        type: string
    secrets: 
      AWS_ACCESS_KEY:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  ensure-jobs-before-build:
    name: "Detect Modified Files"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout REST
        uses: actions/checkout@v3
  project-build:
    needs: 
      - ensure-jobs-before-build
    name: "Project build"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout REST
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "adopt"
          java-version: "17"
          cache: "gradle"

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        working-directory: ./

      - name: Build with Gradle
        run: ./gradlew clean build --no-daemon
        working-directory: ./      

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        id: login-aws
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws-region }}
          mask-aws-account-id: 'no'
          # role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          # role-session-name: ${{ inputs.role-session-name }}
          # role-skip-session-tagging: true
          # role-duration-seconds: 4000

      - name: Access to Amazon ECR
        id: access-ecr
        uses: aws-actions/amazon-ecr-login@v1 

      - uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 6

      - name: Set Image Tag 
        id: condval
        shell: bash
        run: |
          TAG=${{ inputs.stage }} 
          echo ::Set Image Tag Name=value::${TAG} 
          echo ::short-sha Name=value::${{ steps.short-sha.outputs.sha }}
          echo ::GITHUB SHA::${{ github.sha }}

      - name: Generate Docker Image
        env:
          REGISTRY: ${{ steps.access-ecr.outputs.registry }}
          VERSION: "latest"
          PROFILE: "master"    
          # TAG: ${{ steps.condval.outputs.value }}
        run: |
          docker build -t ${REGISTRY}/rest:${VERSION} .
          docker push ${REGISTRY}/rest:${VERSION}
          echo "::set-output name=image::${REGISTRY}/rest:${VERSION}"


      # - name: Push Docker Image
      #   env:
      #     REGISTRY: ${{ steps.access-ecr.outputs.registry }}
      #     VERSION: "0.0.1"
      #   run:
      #     docker push ${REGISTRY}/rest:${VERSION}      
  project-deploy:
    name: project-deploy 
    needs:
      - project-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout REST
        uses: actions/checkout@v2
        with:
          repository: flame-choon/sample-github-action-chart
          ref: ${{ github.ref_name }}
          token: ${{ secrets.FLAME_CHOON_PAT }}
      
      - name: Preprocess
        id: preprocess    
        run: |
          echo "::set-output name=deploymentjson::$(ls */*deployment.yaml | jq -R -s -c 'split("\n")[:-1]')"
